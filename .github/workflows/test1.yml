name: test1

on:
  workflow_dispatch:
    inputs:
      minutes:
        description: 'Number of minutes for considering an issue outdated'
        required: true
        type: number

      comment: 
        description: 'Comment message'
        required: true
        type: string

      tag:
        description: 'Tag to use in the comment (owner or assignee)'
        required: true
        type: string

jobs:
  list-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: List and update issues
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Step 1: Checking out repository');

            // Define options for listing issues
            const opts = github.rest.issues.listForRepo.endpoint.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            console.log('Step 2: Retrieving issues');
            // Retrieve all open issues for the repository
            const issues = await github.paginate(opts);

            console.log('Step 3: Processing issues');
            // Loop through each issue
            for (let i = 0; i < issues.length; i++) {
              const issue = issues[i];
              console.log('Processing issue:', issue.number);

              // Get the last updated timestamp of the issue and the current timestamp
              const issueLastUpdated = new Date(issue.updated_at);
              const currentDate = new Date();

              // Calculate the time difference in milliseconds between the last update and the current time
              const timeDifference = currentDate - issueLastUpdated;
              const fourDaysInMilliseconds = ${{ inputs.minutes }} * 60 * 1000; // 4 days in milliseconds

              // Check if the issue hasn't been updated in the last 4 days
              if (timeDifference >= fourDaysInMilliseconds) {
                console.log('Issue ' + issue.number + ' needs an update');

                // Create a comment text to be posted on the issue
                let commentText = 'Hey';
                if (${{ inputs.tag }} === 'owner') {
                  commentText += ` @${issue.user.login},`;
                } else if (${{ inputs.tag }} === 'assignee' && issue.assignees.length > 0) {
                  const assigneesList = issue.assignees.map(assignee => ` @${assignee.login}`).join(',');
                  commentText += `${assigneesList},`;
                }
                commentText += ` ${inputs.comment}`;

                console.log('Comment text:', commentText);

                // Post a comment on the issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: commentText
                });

                console.log('Comment posted on issue', issue.number);
              }
            }

            console.log('Step 4: Workflow completed');
